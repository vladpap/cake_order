from cake_to_order.settings import TG_BOT_TOKEN
from keyboards import (main_page_keyboard, skip_button, skip_keyboard,
                       without_inscription_keyboard, time_selecting_keyboard,
                       go_home_keyboard, cake_menu_keyboard,
                       go_home_inline_button, cake_improve_keyboard)
from texts import TEXTS

import os
from datetime import date, timedelta
from aiogram import Bot, Router
from aiogram.types import (Message, InlineKeyboardButton, CallbackQuery,
                           FSInputFile)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import CommandStart, Text, StateFilter
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state


os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cake_to_order.settings')
os.environ['DJANGO_ALLOW_ASYNC_UNSAFE'] = 'true'
import django
from django.conf import settings

if not settings.configured:
    django.setup()

from main_app.models import Client


bot = Bot(TG_BOT_TOKEN)
router = Router()


class FSM(StatesGroup):
    shape_choosing_state = State()
    topping_choosing_state = State()
    berries_choosing_state = State()
    decor_choosing_state = State()
    add_inscription_state = State()
    add_comment_state = State()
    input_address_state = State()
    input_date_state = State()
    input_time_state = State()
    show_order_state = State()
    show_selected_cake_state = State()
    cake_menu_state = State()
    input_name_state = State()
    input_phone_state = State()


cake_pic = FSInputFile('pictures/Tort.png')
cake_levels = FSInputFile('pictures/Levels.png')
cake_shape = FSInputFile('pictures/figure.png')
toppings_photo = FSInputFile('pictures/topping.png')
berries_photo = FSInputFile('pictures/berries.png')
decor_photo = FSInputFile('pictures/decor.png')
inscription_photo = FSInputFile('pictures/Text.png')
ready_cakes_photo = FSInputFile('pictures/all.png')
cheesecake_photo = FSInputFile('pictures/005.jpeg')
add_decor_photo = FSInputFile('pictures/add_decor.jpg')

keys_to_check = ('cake_id', 'level_id', 'shape_id', 'topping_id', 'berry_id', 'decor_id')

levels = {1: '1 —É—Ä–æ–≤–µ–Ω—å (+400 —Ä.)',
          2: '2 —É—Ä–æ–≤–Ω—è (+750 —Ä.)',
          3: '3 —É—Ä–æ–≤–Ω—è (+1 100 —Ä.', }
shapes = {1: 'üü° –ö—Ä—É–≥ (+400 —Ä.)',
          2: 'üü® –ö–≤–∞–¥—Ä–∞—Ç (+600 —Ä.)',
          3: 'üü®üü® –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ (+1 000 —Ä.)', }
toppings = {1: '–ë–µ–ª—ã–π —Å–æ—É—Å (+200 —Ä.)',
            2: '–ö–∞—Ä–∞–º–µ–ª—å–Ω—ã–π —Å–∏—Ä–æ–ø (+180 —Ä.)',
            3: '–ö–ª–µ–Ω–æ–≤—ã–π —Å–∏—Ä–æ–ø (+200 —Ä.)',
            4: '–ö–ª—É–±–Ω–∏—á–Ω—ã–π —Å–∏—Ä–æ–ø (+300 —Ä.)',
            5: '–ß–µ—Ä–Ω–∏—á–Ω—ã–π —Å–∏—Ä–æ–ø (+350 —Ä.)',
            6: '–ú–æ–ª–æ—á–Ω—ã–π —à–æ–∫–æ–ª–∞–¥ (+200 —Ä.)', }
berries = {1: '–ï–∂–µ–≤–∏–∫–∞ (+400 —Ä.)',
           2: '–ú–∞–ª–∏–Ω–∞ (+300 —Ä.)',
           3: 'ü´ê –ì–æ–ª—É–±–∏–∫–∞ (+450 —Ä.)',
           4: 'üçì –ö–ª—É–±–Ω–∏–∫–∞ (+500 —Ä.)', }
decors = {1: '–§–∏—Å—Ç–∞—à–∫–∏ (+300 —Ä.)',
          2: '–ë–µ–∑–µ (+400 —Ä.)',
          3: '–§—É–Ω–¥—É–∫ (+350 —Ä.)',
          4: '–ü–µ–∫–∞–Ω (+300 —Ä.)',
          5: '–ú–∞—Ä—à–º–µ–ª–ª–æ—É (+200 —Ä.)',
          6: '–ú–∞—Ä—Ü–∏–ø–∞–Ω (+280 —Ä.)', }
ready_cakes = {1: '–¢–æ—Ä—Ç 1',
               2: '–¢–æ—Ä—Ç 2',
               3: '–¢–æ—Ä—Ç 3',
               4: '–¢–æ—Ä—Ç 4',
               5: '–¢–æ—Ä—Ç 5',
               6: '–¢–æ—Ä—Ç 6',
               7: '–¢–æ—Ä—Ç 7',
               8: '–¢–æ—Ä—Ç 8', }


@router.message(CommandStart())
@router.message(Text(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ'))
async def process_start_command(message: Message, state: FSMContext):
    await state.clear()
    await bot.send_photo(chat_id=message.chat.id, photo=cake_pic,
                         caption=TEXTS['greeting'],
                         reply_markup=main_page_keyboard)


@router.callback_query(lambda callback: callback.data == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ')
async def process_main_menu_button(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    update = Message(message_id=callback.message.message_id, date=callback.message.date, chat=callback.message.chat)
    await process_start_command(update, state)


@router.callback_query(lambda callback: callback.data == '–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É')
async def process_back_to_cake_choosing_button(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    update = Message(message_id=callback.message.message_id, date=callback.message.date, chat=callback.message.chat)
    await process_select_ready_button(update, state)


@router.message(Text(text='–û –Ω–∞—Å'))
async def process_about_us_button(message: Message, state: FSMContext):
    await message.answer(text='–ö–æ–º–ø–∞–Ω–∏—è Cake WOW. –¢–æ—Ä—Ç—ã –Ω–∞ –∑–∞–∫–∞–∑.\n–ù–∞—à –∞–¥—Ä–µ—Å: —É–ª. –ì–∞–≥–∞—Ä–∏–Ω–∞ –¥.52\n–¢–µ–ª–µ—Ñ–æ–Ω: +7999 999 99 99',
                         reply_markup=main_page_keyboard)


@router.message(Text(text='–°–æ–±—Ä–∞—Ç—å —Å–≤–æ–π –∞–≤—Ç–æ—Ä—Å–∫–∏–π —Ç–æ—Ä—Ç'))
async def process_custom_your_cake_button(message: Message, state: FSMContext):
    kb_builder = InlineKeyboardBuilder()
    buttons = [InlineKeyboardButton(text=levels[level], callback_data=level) for level in levels]
    kb_builder.row(*buttons, width=1)
    kb_builder.row(go_home_inline_button)
    await bot.send_photo(chat_id=message.chat.id, photo=cake_levels,
                         caption='–°–∫–æ–ª—å–∫–æ —É—Ä–æ–≤–Ω–µ–π –±—É–¥–µ—Ç?',
                         reply_markup=kb_builder.as_markup())
    await state.set_state(FSM.shape_choosing_state)


@router.callback_query(StateFilter(FSM.shape_choosing_state))
async def process_level_choosing(callback: CallbackQuery, state: FSMContext):
    await state.update_data(level_id=callback.data)
    kb_builder = InlineKeyboardBuilder()
    buttons = [InlineKeyboardButton(text=shapes[shape], callback_data=shape) for shape in shapes]
    kb_builder.row(*buttons, width=1)
    kb_builder.row(go_home_inline_button)
    await bot.send_photo(chat_id=callback.from_user.id, photo=cake_shape,
                         caption='–ö–∞–∫–æ–π —Ñ–æ—Ä–º—ã –±—É–¥–µ—Ç –í–∞—à —Ç–æ—Ä—Ç?',
                         reply_markup=kb_builder.as_markup())
    await state.set_state(FSM.topping_choosing_state)


@router.callback_query(StateFilter(FSM.topping_choosing_state))
async def process_shape_choosing(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    if callback.data == '"–ü—Ä–æ–∫–∞—á–∞—Ç—å" —Ç–æ—Ä—Ç':
        await state.update_data(shape_id='no_data')
    else:
        await state.update_data(shape_id=callback.data)
    kb_builder = InlineKeyboardBuilder()
    buttons = [InlineKeyboardButton(text=toppings[topping], callback_data=topping) for topping in toppings]
    kb_builder.row(*buttons, width=1)
    kb_builder.row(skip_button)
    kb_builder.row(go_home_inline_button)
    await bot.send_photo(chat_id=callback.from_user.id, photo=toppings_photo,
                         caption='–í—ã–±—Ä–∞—Ç—å —Ç–æ–ø–∏–Ω–≥',
                         reply_markup=kb_builder.as_markup())
    await state.set_state(FSM.berries_choosing_state)


@router.callback_query(StateFilter(FSM.berries_choosing_state))
async def process_toping_choosing(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.update_data(topping_id=callback.data)
    kb_builder = InlineKeyboardBuilder()
    buttons = [InlineKeyboardButton(text=berries[berry], callback_data=berry) for berry in berries]
    kb_builder.row(*buttons, width=1)
    kb_builder.row(skip_button)
    kb_builder.row(go_home_inline_button)
    await bot.send_photo(chat_id=callback.from_user.id, photo=berries_photo,
                         caption='–î–æ–±–∞–≤–∏—Ç—å —è–≥–æ–¥',
                         reply_markup=kb_builder.as_markup())
    await state.set_state(FSM.decor_choosing_state)


@router.callback_query(StateFilter(FSM.decor_choosing_state))
async def process_berry_choosing(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.update_data(berry_id=callback.data)
    kb_builder = InlineKeyboardBuilder()
    buttons = [InlineKeyboardButton(text=decors[decor], callback_data=decor) for decor in decors]
    kb_builder.row(*buttons, width=1)
    kb_builder.row(skip_button)
    kb_builder.row(go_home_inline_button)
    await bot.send_photo(chat_id=callback.from_user.id, photo=decor_photo,
                         caption='–í—ã–±—Ä–∞—Ç—å –¥–µ–∫–æ—Ä',
                         reply_markup=kb_builder.as_markup())
    await state.set_state(FSM.add_inscription_state)


@router.callback_query(StateFilter(FSM.add_inscription_state))
async def process_decor_choosing(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.update_data(decor_id=callback.data)
    await bot.send_photo(chat_id=callback.from_user.id, photo=inscription_photo,
                         caption='–ú—ã –º–æ–∂–µ–º —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –Ω–∞ —Ç–æ—Ä—Ç–µ –ª—é–±—É—é –Ω–∞–¥–ø–∏—Å—å\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–¥–ø–∏—Å—å—é',
                         reply_markup=without_inscription_keyboard)
    await state.set_state(FSM.add_comment_state)


@router.callback_query(StateFilter(FSM.add_comment_state))
async def process_without_inscription_button(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.update_data(inscription='no_data')
    await bot.send_message(chat_id=callback.from_user.id,
                           text='–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É',
                           reply_markup=skip_keyboard)
    await state.set_state(FSM.input_name_state)


@router.message(StateFilter(FSM.add_comment_state))
async def process_inscription_input(message: Message, state: FSMContext):
    await state.update_data(inscription=message.text)
    await message.answer(text='–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É',
                         reply_markup=skip_keyboard)
    await state.set_state(FSM.input_name_state)


@router.callback_query(StateFilter(FSM.input_name_state))
async def process_without_comment_button(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.update_data(comment=callback.data)
    await bot.send_message(chat_id=callback.from_user.id,
                           text='–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:\n–í–≤–æ–¥—è –≤–∞—à–∏ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—ã '
                           '–¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö')
    await state.set_state(FSM.input_phone_state)


@router.message(StateFilter(FSM.input_name_state))
async def process_comment_input(message: Message, state: FSMContext):
    await state.update_data(comment=message.text)
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:\n–í–≤–æ–¥—è –≤–∞—à–∏ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—ã '
                         '–¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö')
    await state.set_state(FSM.input_phone_state)


@router.message(StateFilter(FSM.input_phone_state))
async def process_name_input(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:')
    await state.set_state(FSM.input_address_state)


@router.message(StateFilter(FSM.input_address_state))
async def process_phone_input(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:')
    await state.set_state(FSM.input_date_state)


@router.message(StateFilter(FSM.input_date_state))
async def process_address_input(message: Message, state: FSMContext):
    await state.update_data(address=message.text)

    day = date.today()
    dates = []
    for _ in range(8):
        day += timedelta(days=1)
        dates.append(day)
    dates = [f'{date.day}.{str(date.month).zfill(2)}' for date in dates]

    kb_builder = InlineKeyboardBuilder()
    buttons = [InlineKeyboardButton(text=date, callback_data=date) for date in dates]
    kb_builder.row(*buttons, width=4)
    kb_builder.row(go_home_inline_button)
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏',
                         reply_markup=kb_builder.as_markup())
    await state.set_state(FSM.input_time_state)


@router.callback_query(StateFilter(FSM.input_time_state))
async def process_date_input(callback: CallbackQuery, state: FSMContext):
    await state.update_data(date=callback.data)
    await bot.send_message(chat_id=callback.from_user.id,
                           text='–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è',
                           reply_markup=time_selecting_keyboard)
    await state.set_state(FSM.show_order_state)


@router.callback_query(StateFilter(FSM.show_order_state))
async def process_time_input(callback: CallbackQuery, state: FSMContext):
    await state.update_data(time=callback.data)
    cake = await state.get_data()
    await state.clear()
    for key in keys_to_check:
        if key not in cake:
            cake[key] = 'no_data'
    await bot.send_message(chat_id=callback.from_user.id,
                           text=f'–í–∞—à –∑–∞–∫–∞–∑:\n{cake}',
                           reply_markup=go_home_keyboard)
    await state.set_state(default_state)


@router.message(Text(text='–í—ã–±—Ä–∞—Ç—å –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞'))
async def process_select_ready_button(message: Message, state: FSMContext):
    kb_builder = InlineKeyboardBuilder()
    buttons = [InlineKeyboardButton(text=cake, callback_data=cake) for cake in ready_cakes]
    kb_builder.row(*buttons, width=3)
    kb_builder.row(go_home_inline_button)
    await bot.send_photo(chat_id=message.chat.id, photo=ready_cakes_photo,
                         caption='–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ª—é–±–∏–º—ã–π —Ç–æ—Ä—Ç',
                         reply_markup=kb_builder.as_markup())
    await state.set_state(FSM.show_selected_cake_state)


@router.callback_query(StateFilter(FSM.show_selected_cake_state),
                       lambda callback: callback.data in str(ready_cakes.keys()))
async def show_selected_cake(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.update_data(cake_id=callback.data)
    await bot.send_photo(chat_id=callback.from_user.id, photo=cheesecake_photo,
                         caption='–®–æ–∫–æ–ª–∞–¥–Ω—ã–π —á–∏–∑–∫–µ–π–∫\n—à–æ–∫–æ–ª–∞–¥–Ω—ã–π —á–∏–∑–∫–µ–π–∫, —É–∫—Ä–∞—à–µ–Ω —à–∞—Ä–∏–∫–∞–º–∏ –∫—Ä–∏—Å–ø–∏\n4960 ‚ÇΩ / 2,3 –∫–≥',
                         reply_markup=cake_menu_keyboard)


@router.callback_query(lambda callback: callback.data == '–ó–∞–∫–∞–∑–∞—Ç—å')
async def process_order_ready_cake_button(callback: CallbackQuery):
    await callback.answer()
    await bot.send_photo(chat_id=callback.from_user.id, photo=add_decor_photo,
                         caption='–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–ø–∏–Ω–≥, —è–≥–æ–¥—ã, –¥–µ–∫–æ—Ä –∏ –Ω–∞–¥–ø–∏—Å—å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–æ—Ä—Ç—É',
                         reply_markup=cake_improve_keyboard)


@router.callback_query(lambda callback: callback.data == '"–ü—Ä–æ–∫–∞—á–∞—Ç—å" —Ç–æ—Ä—Ç')
async def process_improve_cake_button(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await process_shape_choosing(callback, state)


@router.callback_query(lambda callback: callback.data == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑')
async def process_confirm_order_button(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await process_without_inscription_button(callback, state)
