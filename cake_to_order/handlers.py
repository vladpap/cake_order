from cake_to_order.settings import TG_BOT_TOKEN
from keyboards import (main_page_keyboard, skip_button, skip_keyboard,
                       without_inscription_keyboard, time_selecting_keyboard,
                       go_home_keyboard)
from texts import TEXTS

import os
from datetime import date, timedelta
from aiogram import Bot, Router
from aiogram.types import (Message, KeyboardButton, InlineKeyboardButton,
                           InlineKeyboardMarkup, CallbackQuery,
                           ReplyKeyboardRemove, FSInputFile)
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.filters import CommandStart, Text, StateFilter
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state


os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cake_to_order.settings')
os.environ['DJANGO_ALLOW_ASYNC_UNSAFE'] = 'true'
import django
from django.conf import settings

if not settings.configured:
    django.setup()

from main_app.models import ClientUser


bot = Bot(TG_BOT_TOKEN)
router = Router()


class FSM(StatesGroup):
    # start_page_state = State()
    # custom_cake_state = State()
    # level_choosing_state = State()
    shape_choosing_state = State()
    topping_choosing_state = State()
    berries_choosing_state = State()
    decor_choosing_state = State()
    add_inscription_state = State()
    add_comment_state = State()
    input_address_state = State()
    input_date_state = State()
    input_time_state = State()
    show_order_state = State()


cake_pic = FSInputFile('pictures/Tort.png')
cake_levels = FSInputFile('pictures/Levels.png')
cake_shape = FSInputFile('pictures/figure.png')
toppings_photo = FSInputFile('pictures/topping.png')
berries_photo = FSInputFile('pictures/berries.png')
decor_photo = FSInputFile('pictures/decor.png')
inscription_photo = FSInputFile('pictures/Text.png')
ready_cakes_photo = FSInputFile('pictures/all.png')


levels = {1: '1 —É—Ä–æ–≤–µ–Ω—å (+400 —Ä.)',
          2: '2 —É—Ä–æ–≤–Ω—è (+750 —Ä.)',
          3: '3 —É—Ä–æ–≤–Ω—è (+1 100 —Ä.', }
shapes = {1: 'üü° –ö—Ä—É–≥ (+400 —Ä.)',
          2: 'üü® –ö–≤–∞–¥—Ä–∞—Ç (+600 —Ä.)',
          3: 'üü®üü® –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ (+1 000 —Ä.)', }
toppings = {1: '–ë–µ–ª—ã–π —Å–æ—É—Å (+200 —Ä.)',
            2: '–ö–∞—Ä–∞–º–µ–ª—å–Ω—ã–π —Å–∏—Ä–æ–ø (+180 —Ä.)',
            3: '–ö–ª–µ–Ω–æ–≤—ã–π —Å–∏—Ä–æ–ø (+200 —Ä.)',
            4: '–ö–ª—É–±–Ω–∏—á–Ω—ã–π —Å–∏—Ä–æ–ø (+300 —Ä.)',
            5: '–ß–µ—Ä–Ω–∏—á–Ω—ã–π —Å–∏—Ä–æ–ø (+350 —Ä.)',
            6: '–ú–æ–ª–æ—á–Ω—ã–π —à–æ–∫–æ–ª–∞–¥ (+200 —Ä.)', }
berries = {1: '–ï–∂–µ–≤–∏–∫–∞ (+400 —Ä.)',
           2: '–ú–∞–ª–∏–Ω–∞ (+300 —Ä.)',
           3: 'ü´ê –ì–æ–ª—É–±–∏–∫–∞ (+450 —Ä.)',
           4: 'üçì –ö–ª—É–±–Ω–∏–∫–∞ (+500 —Ä.)', }
decors = {1: '–§–∏—Å—Ç–∞—à–∫–∏ (+300 —Ä.)',
          2: '–ë–µ–∑–µ (+400 —Ä.)',
          3: '–§—É–Ω–¥—É–∫ (+350 —Ä.)',
          4: '–ü–µ–∫–∞–Ω (+300 —Ä.)',
          5: '–ú–∞—Ä—à–º–µ–ª–ª–æ—É (+200 —Ä.)',
          6: '–ú–∞—Ä—Ü–∏–ø–∞–Ω (+280 —Ä.)', }
ready_cakes = {1: '–¢–æ—Ä—Ç 1',
               2: '–¢–æ—Ä—Ç 2',
               3: '–¢–æ—Ä—Ç 3',
               4: '–¢–æ—Ä—Ç 4',
               5: '–¢–æ—Ä—Ç 5',
               6: '–¢–æ—Ä—Ç 6',
               7: '–¢–æ—Ä—Ç 7',
               8: '–¢–æ—Ä—Ç 8', }


@router.message(CommandStart())
@router.message(Text(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ'))
async def process_start_command(message: Message, state: FSMContext):
    await state.clear()
    # state.set_state(default_state)
    await bot.send_photo(chat_id=message.chat.id, photo=cake_pic,
                         caption=TEXTS['greeting'],
                         reply_markup=main_page_keyboard)


@router.message(Text(text='–°–æ–±—Ä–∞—Ç—å —Å–≤–æ–π –∞–≤—Ç–æ—Ä—Å–∫–∏–π —Ç–æ—Ä—Ç'))
async def process_custom_your_cake_button(message: Message, state: FSMContext):
    kb_builder = InlineKeyboardBuilder()
    buttons = [InlineKeyboardButton(text=levels[level], callback_data=level) for level in levels]
    kb_builder.row(*buttons, width=1)
    await bot.send_photo(chat_id=message.chat.id, photo=cake_levels,
                         caption='–°–∫–æ–ª—å–∫–æ —É—Ä–æ–≤–Ω–µ–π –±—É–¥–µ—Ç?',
                         reply_markup=kb_builder.as_markup())
    await state.set_state(FSM.shape_choosing_state)


@router.callback_query(StateFilter(FSM.shape_choosing_state))
async def process_level_choosing(callback: CallbackQuery, state: FSMContext):
    await state.update_data(level_id=callback.data)
    kb_builder = InlineKeyboardBuilder()
    buttons = [InlineKeyboardButton(text=shapes[shape], callback_data=shape) for shape in shapes]
    kb_builder.row(*buttons, width=1)
    await bot.send_photo(chat_id=callback.from_user.id, photo=cake_shape,
                         caption='–ö–∞–∫–æ–π —Ñ–æ—Ä–º—ã –±—É–¥–µ—Ç –í–∞—à —Ç–æ—Ä—Ç?',
                         reply_markup=kb_builder.as_markup())
    await state.set_state(FSM.topping_choosing_state)


@router.callback_query(StateFilter(FSM.topping_choosing_state))
async def process_shape_choosing(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.update_data(shape_id=callback.data)
    kb_builder = InlineKeyboardBuilder()
    buttons = [InlineKeyboardButton(text=toppings[topping], callback_data=topping) for topping in toppings]
    kb_builder.row(*buttons, width=1)
    kb_builder.row(skip_button)
    await bot.send_photo(chat_id=callback.from_user.id, photo=toppings_photo,
                         caption='–í—ã–±—Ä–∞—Ç—å —Ç–æ–ø–∏–Ω–≥',
                         reply_markup=kb_builder.as_markup())
    await state.set_state(FSM.berries_choosing_state)


@router.callback_query(StateFilter(FSM.berries_choosing_state))
async def process_toping_choosing(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.update_data(topping_id=callback.data)
    kb_builder = InlineKeyboardBuilder()
    buttons = [InlineKeyboardButton(text=berries[berry], callback_data=berry) for berry in berries]
    kb_builder.row(*buttons, width=1)
    kb_builder.row(skip_button)
    await bot.send_photo(chat_id=callback.from_user.id, photo=berries_photo,
                         caption='–î–æ–±–∞–≤–∏—Ç—å —è–≥–æ–¥',
                         reply_markup=kb_builder.as_markup())
    await state.set_state(FSM.decor_choosing_state)


@router.callback_query(StateFilter(FSM.decor_choosing_state))
async def process_berry_choosing(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.update_data(berry_id=callback.data)
    kb_builder = InlineKeyboardBuilder()
    buttons = [InlineKeyboardButton(text=decors[decor], callback_data=decor) for decor in decors]
    kb_builder.row(*buttons, width=1)
    kb_builder.row(skip_button)
    await bot.send_photo(chat_id=callback.from_user.id, photo=decor_photo,
                         caption='–í—ã–±—Ä–∞—Ç—å –¥–µ–∫–æ—Ä',
                         reply_markup=kb_builder.as_markup())
    await state.set_state(FSM.add_inscription_state)


@router.callback_query(StateFilter(FSM.add_inscription_state))
async def process_decor_choosing(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.update_data(decor_id=callback.data)
    await bot.send_photo(chat_id=callback.from_user.id, photo=inscription_photo,
                         caption='–ú—ã –º–æ–∂–µ–º —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –Ω–∞ —Ç–æ—Ä—Ç–µ –ª—é–±—É—é –Ω–∞–¥–ø–∏—Å—å\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–¥–ø–∏—Å—å—é',
                         reply_markup=without_inscription_keyboard)
    await state.set_state(FSM.add_comment_state)


@router.callback_query(StateFilter(FSM.add_comment_state))
async def process_without_inscription_button(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.update_data(inscription=callback.data)
    await bot.send_message(chat_id=callback.from_user.id,
                           text='–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É',
                           reply_markup=skip_keyboard)
    await state.set_state(FSM.input_address_state)


@router.message(StateFilter(FSM.add_comment_state))
async def process_inscription_input(message: Message, state: FSMContext):
    await state.update_data(inscription=message.text)
    await message.answer(text='–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É',
                         reply_markup=skip_keyboard)
    await state.set_state(FSM.input_address_state)


@router.callback_query(StateFilter(FSM.input_address_state))
async def process_without_comment_button(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.update_data(comment=callback.data)
    await bot.send_message(chat_id=callback.from_user.id,
                           text='–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏')
    await state.set_state(FSM.input_date_state)


@router.message(StateFilter(FSM.input_address_state))
async def process_comment_input(message: Message, state: FSMContext):
    await state.update_data(comment=message.text)
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏')
    await state.set_state(FSM.input_date_state)


@router.message(StateFilter(FSM.input_date_state))
async def process_address_input(message: Message, state: FSMContext):
    await state.update_data(address=message.text)

    day = date.today()
    dates = []
    for _ in range(8):
        day += timedelta(days=1)
        dates.append(day)
    dates = [f'{date.day}.{str(date.month).zfill(2)}' for date in dates]

    kb_builder = InlineKeyboardBuilder()
    buttons = [InlineKeyboardButton(text=date, callback_data=date) for date in dates]
    kb_builder.row(*buttons, width=4)
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏',
                         reply_markup=kb_builder.as_markup())
    await state.set_state(FSM.input_time_state)


@router.callback_query(StateFilter(FSM.input_time_state))
async def process_date_input(callback: CallbackQuery, state: FSMContext):
    await state.update_data(date=callback.data)
    await bot.send_message(chat_id=callback.from_user.id,
                           text='–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è',
                           reply_markup=time_selecting_keyboard)
    await state.set_state(FSM.show_order_state)


@router.callback_query(StateFilter(FSM.show_order_state))
async def process_time_input(callback: CallbackQuery, state: FSMContext):
    await state.update_data(time=callback.data)
    cake = await state.get_data()
    await state.clear()
    await bot.send_message(chat_id=callback.from_user.id,
                           text=f'–í–∞—à –∑–∞–∫–∞–∑:\n{cake}',
                           reply_markup=go_home_keyboard)
    await state.set_state(default_state)


@router.message(Text(text='–í—ã–±—Ä–∞—Ç—å –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞'))
async def process_select_ready_button(message: Message, state: FSMContext):
    kb_builder = InlineKeyboardBuilder()
    buttons = [InlineKeyboardButton(text=cake, callback_data=cake) for cake in ready_cakes]
    kb_builder.row(*buttons, width=3)
    await bot.send_photo(chat_id=message.chat.id, photo=ready_cakes_photo,
                         caption='–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ª—é–±–∏–º—ã–π —Ç–æ—Ä—Ç',
                         reply_markup=kb_builder.as_markup())
    # await state.set_state(FSM.shape_choosing_state)


# cake = await state.get_data()
# print(cake)
# await state.clear()
# await state.set_state(default_state)


# # –≤–µ—Ç–∫–∞ —Å–ø–∏–∫–µ—Ä–∞
# @router.message(Text(text='–°–ø–∏–∫–µ—Ä'))
# async def process_speaker_greeting(message: Message, state: FSMContext):
#     if speaker := User.objects.filter(tg_id=message.from_user.id, role='S'):
#         await message.answer(text=TEXTS['speaker_greeting'].format(speaker[0].full_name),
#                              reply_markup=next_keyboard)
#     else:
#         await message.answer(text=TEXTS['speaker_not_recognized'],
#                              reply_markup=get_id_keyboard)


# @router.message(Text(text='–£–∑–Ω–∞—Ç—å —Å–≤–æ–π telegram id'))
# async def process_get_id(message: Message):
#     await message.answer(text=f'–í–∞—à telegram id:\n{message.from_user.id}')


# @router.message(Text(text='–î–∞–ª–µ–µ'))
# async def process_display_reports(message: Message):
#     text = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫–ª–∞–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–æ–∫–ª–∞–¥ –∏–ª–∏ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –¥–æ–∫–ª–∞–¥—É:\n\n'
#     if reports := Report.objects.filter(speaker__tg_id=message.from_user.id, event__date=datetime.now().date()):
#         kb_builder = ReplyKeyboardBuilder()
#         for count, report in enumerate(reports, start=1):
#             text += TEXTS['reports_for_speaker'].format(count, report.event.date, report.planed_start_time, report.report_title, report.event.place)
#         buttons = [KeyboardButton(text=f'‚Ññ{count} {report.report_title}') for count, report in enumerate(reports, start=1)]
#         kb_builder.row(*buttons, width=1)
#         kb_builder.row(homepage_button)
#         await message.answer(text=text, reply_markup=kb_builder.as_markup(resize_keyboard=True))
#     else:
#         await message.answer(text='–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ–∫–ª–∞–¥–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.', reply_markup=go_home_contact_organizer_keyboard)


# @router.message(lambda msg: msg.text.startswith('‚Ññ'))
# async def process_report_selection(message: Message):
#     report = Report.objects.get(report_title=message.text[3:])
#     text = TEXTS['report'].format(report.report_title, report.event.date, report.planed_start_time, report.event.place)
#     btn = InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å –¥–æ–∫–ª–∞–¥', callback_data=report.report_title)
#     kb = InlineKeyboardMarkup(inline_keyboard=[[btn]])
#     await message.answer(text=text, reply_markup=kb)


# @router.callback_query(lambda callback: callback.data in Report.objects.all().values_list('report_title', flat=True))
# async def process_start_report(callback: CallbackQuery):
#     await callback.answer()
#     report = Report.objects.get(report_title=callback.data)
#     report.actual_start_time = datetime.now()
#     report.save()
#     btn = InlineKeyboardButton(text='–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–∫–ª–∞–¥', callback_data='$#' + report.report_title)
#     kb = InlineKeyboardMarkup(inline_keyboard=[[btn]])
#     new_text = callback.message.text + '\n\n–í—ã –Ω–∞—á–∞–ª–∏ –¥–æ–∫–ª–∞–¥. –ö–æ–≥–¥–∞ –¥–æ–∫–ª–∞–¥ –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –æ—Ç–≤–µ—Ç–∞–º –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å–ª—É—à–∞—Ç–µ–ª–µ–π.'
#     await callback.message.edit_text(text=new_text, reply_markup=kb)
#     await callback.message.answer(text='–ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –¥–æ–∫–ª–∞–¥ üëÜ',
#                                   reply_markup=ReplyKeyboardRemove())


# @router.callback_query(lambda callback: callback.data.startswith('$#'))
# async def process_end_report(callback: CallbackQuery):
#     report = Report.objects.get(report_title=callback.data[2:])
#     report.actual_end_time = datetime.now()
#     report.save()
#     questions = Question.objects.filter(report=report)
#     text = '–í–æ–ø—Ä–æ—Å—ã —Å–ª—É—à–∞—Ç–µ–ª–µ–π:\n'
#     for count, question in enumerate(questions, start=1):
#         text += TEXTS['question'].format(count, question.user.tg_nickname, question.question_text)
#     await callback.message.answer(text=text,
#                                   reply_markup=go_home_keyboard)


# # –≤–µ—Ç–∫–∞ –≥–æ—Å—Ç—è
# @router.message(Text(text='–ì–æ—Å—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'))
# async def process_guest_greeting(message: Message, state: FSMContext):
#     await message.answer(text=TEXTS['guest_greeting'].format(message.from_user.first_name),
#                          reply_markup=guest_registration_keyboard)


# @router.message(Text(text='–í–≤–µ—Å—Ç–∏ Email'))
# async def process_enter_email(message: Message, state: FSMContext):
#     await message.answer(text='–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ. –ú—ã —á–µ—Å—Ç–Ω–æ –Ω–µ –±—É–¥–µ–º —Å–ø–∞–º–∏—Ç—å.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º –≤–∞—à Email:',
#                          reply_markup=go_home_keyboard)
#     await state.set_state(FSM.enter_email_state)


# @router.message(StateFilter(FSM.enter_email_state))
# async def enter_mail(message: Message, state: FSMContext):
#     if str(message.from_user.id) not in User.objects.all().values_list('tg_id', flat=True):
#         User.objects.update_or_create(tg_id=message.from_user.id, tg_nickname=message.from_user.username, email=message.text)
#     else:
#         user = User.objects.get(tg_id=str(message.from_user.id))
#         if not user.tg_nickname:
#             user.tg_nickname = message.from_user.username
#             user.save()
#         if not user.email:
#             user.email = message.text
#             user.save()
#     if event := Event.objects.filter(date=datetime.now().date()):
#         event = event[0]
#         await message.answer(text=TEXTS['success_registration'].format(event.event_name, event.date, event.place, event.start_time),
#                              reply_markup=event_keyboard)
#     else:
#         await message.answer(text='–ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π', reply_markup=go_home_keyboard)
#     await state.set_state(default_state)


# @router.message(Text(text=['–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ Email', '–ù–∞ –≥–ª–∞–≤–Ω—É—é']))
# async def process_without_email(message: Message, state: FSMContext):
#     if str(message.from_user.id) not in User.objects.all().values_list('tg_id', flat=True):
#         User.objects.update_or_create(tg_id=message.from_user.id, tg_nickname=message.from_user.username)
#     else:
#         user = User.objects.get(tg_id=str(message.from_user.id))
#         if not user.tg_nickname:
#             user.tg_nickname = message.from_user.username
#             user.save()
#     if event := Event.objects.filter(date=datetime.now().date()):
#         event = event[0]
#         await message.answer(text=TEXTS['success_registration'].format(event.event_name, event.date, event.place, event.start_time),
#                              reply_markup=event_keyboard)
#     else:
#         await message.answer(text='–ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π', reply_markup=go_home_keyboard)


# @router.message(Text(text='–°–ø–∏–∫–µ—Ä—ã'))
# async def process_show_speakers(message: Message, state: FSMContext):
#     event = Event.objects.filter(date=datetime.now().date())[0]
#     reports = Report.objects.filter(event=event).order_by('planed_start_time')
#     speakers = [report.speaker for report in reports]
#     kb_builder = InlineKeyboardBuilder()
#     buttons = [InlineKeyboardButton(text=speaker.full_name, callback_data=speaker.full_name) for speaker in speakers]
#     kb_builder.row(*buttons, width=1)
#     await message.answer(text=TEXTS['show_speakers'], reply_markup=kb_builder.as_markup(resize_keyboard=True))


# @router.callback_query(lambda callback: callback.data in User.objects.filter(role='S').values_list('full_name', flat=True))
# async def process_show_speaker(callback: CallbackQuery):
#     speaker = User.objects.get(full_name=callback.data)
#     await callback.answer()
#     await callback.message.answer(text=TEXTS['speaker'].format(speaker.full_name, speaker.workplace, speaker.experience))


# @router.message(Text(text='–ü—Ä–æ–≥—Ä–∞–º–º–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'))
# async def process_show_program(message: Message, state: FSMContext):
#     event = Event.objects.filter(date=datetime.now().date())[0]
#     reports = Report.objects.filter(event=event).order_by('planed_start_time')
#     text = f'–ü—Ä–æ–≥—Ä–∞–º–º–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è "{event.event_name}":\n–î–∞—Ç–∞: {event.date}\n–ú–µ—Å—Ç–æ:\n{event.place}\n–î–æ–∫–ª–∞–¥—ã:\n\n'
#     for count, report in enumerate(reports, start=1):
#         text += TEXTS['reports_for_listener'].format(count, report.planed_start_time, report.report_title, report.speaker)
#     await message.answer(text=text,
#                          reply_markup=event_homepage_keyboard)


# @router.message(Text(text='–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–ø–∏–∫–µ—Ä—É'))
# async def process_ask_question(message: Message, state: FSMContext):
#     if report := Report.objects.filter(actual_start_time__isnull=False, actual_end_time__isnull=True):
#         await message.answer(text=f'–°–µ–π—á–∞—Å –≤—ã—Å—Ç—É–ø–∞–µ—Ç: {report[0].speaker.full_name}\n–¢–µ–º–∞: {report[0].report_title}\n\n–ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–ø–∏–∫–µ—Ä—É, –∫–æ—Ç–æ—Ä—ã–π —Å–µ–π—á–∞—Å —á–∏—Ç–∞–µ—Ç –¥–æ–∫–ª–∞–¥, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:',
#                              reply_markup=event_homepage_keyboard)
#         await state.set_state(FSM.enter_question_state)
#     else:
#         await message.answer(text='–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∏–∫—Ç–æ –Ω–µ –≤—ã—Å—Ç—É–ø–∞–µ—Ç!',
#                              reply_markup=event_homepage_keyboard)


# @router.message(StateFilter(FSM.enter_question_state))
# async def enter_question(message: Message, state: FSMContext):
#     if report := Report.objects.filter(actual_start_time__isnull=False, actual_end_time__isnull=True):
#         Question.objects.create(question_text=message.text, user=User.objects.get(tg_id=message.from_user.id), report=report[0])
#         await message.answer(text='–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å.\n–°–ø–∏–∫–µ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –Ω–µ–≥–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–æ–∫–ª–∞–¥–∞.',
#                              reply_markup=event_homepage_keyboard)
#     else:
#         await message.answer(text='–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–∞–∂–µ—Ç—Å—è —Å–ø–∏–∫–µ—Ä —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª —Å–≤–æ–π –¥–æ–∫–ª–∞–¥',
#                              reply_markup=event_homepage_keyboard)
#     await state.set_state(default_state)
